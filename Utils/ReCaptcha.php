<?php

declare(strict_types=1);

namespace Utils;


class ReCaptcha
{

    private $jsAPI;
    private $remoteAPI;
    private $publicKey;
    private $secretKey;

    /**
     * ReCaptcha constructor.
     * @param string $jsAPI JavaScript API
     * @param string $remoteAPI Remote API
     * @param string $publicKey Your public key
     * @param string $secretKey Your secret key
     */
    public function __construct(string $jsAPI, string $remoteAPI, string $publicKey, string $secretKey)
    {
        $this->jsAPI = $jsAPI;
        $this->remoteAPI = $remoteAPI;
        $this->publicKey = $publicKey;
        $this->secretKey = $secretKey;
    }

    /**
     * @param string $file configuration .ini file containing reCAPTCHA section with js_api, remote_api, public_key and secret_key keys
     * @return ReCaptcha
     * @throws UtilsException if configuration .ini file doesn't exist
     */
    public static function createFromINI(string $file = __DIR__.'/../conf/.htconfig.ini') : self
    {
        if (!file_exists($file)) {
            throw new UtilsException('Configuration file not found.');
        }

        if (!($parsed = parse_ini_file($file, true))) {
            throw new UtilsException('Error reading configuration file.');
        }

        $values = $parsed['reCAPTCHA'] ?? [];

        if (!isset($values['js_api'], $values['remote_api'], $values['public_key'], $values['secret_key'])) {
            throw new UtilsException('Unrecognized structure of configuration file.');
        }

        return new self($values['js_api'], $values['remote_api'], $values['public_key'], $values['secret_key']);
    }

    /**
     * @return string JavaScript API
     */
    public function getJsAPI() : string
    {
        return $this->jsAPI;
    }

    /**
     * @return string Your public key
     */
    public function getPublicKey() : string
    {
        return $this->publicKey;
    }

    /**
     * Verifies a string generated by JavaScript API
     * @param string $localResponse String generated by JavaScript you get from the form.
     * @return bool true if $localResponse string is valid
     */
    public function verify(string $localResponse) : bool
    {
        $query_data = [
            'secret' => $this->secretKey,
            'response' => $localResponse,
            'remoteip' => $_SERVER['REMOTE_ADDR'],
        ];

        $request = new HttpRequest($this->remoteAPI, $query_data);

        return $request->responseJsonDecoded()->{'success'};
    }
}